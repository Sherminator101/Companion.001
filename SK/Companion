import os
import time
import pyaudio
import playsound
from gtts import gTTS
from openai import OpenAI
from pydantic import FilePath
import speech_recognition as sr
import pyautogui
import pytesseract
from PIL import Image
from googlesearch import search

api_key = "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"
client = OpenAI(api_key="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")

lang = 'en'
openai_api_key = api_key

guy = ""

microphone = sr.Microphone(device_index=1)


def play_audio(text):
    speech = gTTS(text=text, lang=lang, tld="com.au", slow=False)
    speech.save("audio.mp3")
    playsound.playsound("audio.mp3")
    os.remove("audio.mp3")


def create_note_file(file_path, note):
    with open(file_path, "a") as f:
        f.write(note + "\n")


def note_file(file_path, note):
    with open(file_path, "a") as f:
        f.write(note + "\n")


def save_links_to_php(links, file_path, num_links=3):
    with open(file_path, "a") as f:
        f.write("<?php\n")
        for i, link in enumerate(links[:num_links]):
            f.write("$link" + str(i + 1) + " = '" + link + "';\n")
        f.write("?>\n")


def get_audio():
    r = sr.Recognizer()
    with microphone as source:
        audio = r.listen(source)
        said = ""

        try:
            said = r.recognize_google(audio)
            print(said)
            global guy
            guy = said

            if "note" in said:
                print("Opening Note")
                play_audio("What would you like to make a note about")
                note_audio = r.listen(source)
                note = r.recognize_google(note_audio)
                print("Note Saved!")
                play_audio("Note was saved successfully")
                file_path = os.path.expanduser("~/Desktop/note.txt")
                create_note_file(file_path, note)  # Corrected order of arguments

            if "suck" in said:
                play_audio("I am sorry you are frustrated")

            elif "Friday" in said:
                new_string = said.replace("Friday", "")
                print(new_string)
                completion = client.chat.completions.create(
                    model="gpt-3.5-turbo", messages=[{"role": "user", "content": new_string}]
                )
                text = completion.choices[0].message.content

                # Web search
                play_audio("Here are some search results for your question:")
                links = list(search(text, num=3, stop=3, pause=2))
                for link in links:
                    print(link)

                # Save links to a PHP file
                links_file_path = os.path.expanduser("~/Desktop/links.php")
                save_links_to_php(links, links_file_path, num_links=3)
                play_audio("Top 3 search results saved to links.php")

        except Exception as e:
            print("Exception:", str(e))


while True:
    if "stop" in guy:
        break
    get_audio()
